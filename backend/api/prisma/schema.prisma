datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator js_client {
  provider        = "prisma-client-js"
  output          = "./client"
  engineType      = "binary"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch"]
}

model User {
  id        String       @id
  fridges   UserFridge[]
  feedbacks Feedback[]
}

model Feedback {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  recipe   Recipe  @relation(fields: [recipeId], references: [id])
  recipeId String
  isChosen Boolean
  rating   Int
  notes    String?
}

model Recipe {
  id                String             @id
  title             String
  category          String
  imageUrl          String?
  recipeIngredients RecipeIngredient[]
  steps             Step[]
  feedbacks         Feedback[]
}

model Step {
  id         Int     @id @default(autoincrement())
  recipe     Recipe  @relation(fields: [recipeId], references: [id])
  recipeId   String
  nStep      Int
  imageUrl   String?
  explaining String
}

model RecipeIngredient {
  id             Int        @id @default(autoincrement())
  recipe         Recipe     @relation(fields: [recipeId], references: [id])
  recipeId       String
  ingredient     Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId   Int
  amountText     String
  amount         Float
  Product        Product?   @relation(fields: [productBarcode], references: [barcode])
  productBarcode String?
}

model Ingredient {
  id                Int                 @id @default(autoincrement())
  name              String
  unit              String?
  products          Product[]
  recipeIngredients RecipeIngredient[]
  IngredientProduct IngredientProduct[]
}

model Product {
  barcode           String                 @id
  fridge            Fridge?             @relation(fields: [fridgeId], references: [id])
  fridgeId          Int?
  ingredient        Ingredient          @relation(fields: [ingredientId], references: [id])
  ingredientId      Int
  name              String
  brand             String
  labels            Boolean
  ecoScore          Int
  novaScore         Int
  bigImageUrl       String
  miniImageUrl      String
  meal              Boolean
  allergens         String
  quantity          Int
  fridges           FridgeProduct[]
  recipeIngredients RecipeIngredient[]
  IngredientProduct IngredientProduct[]
}

model Fridge {
  id        Int             @id @default(autoincrement())
  name      String
  products  FridgeProduct[]
  users     UserFridge[]
  Product   Product[]
}

model UserFridge {
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  fridge   Fridge  @relation(fields: [fridgeId], references: [id])
  fridgeId Int
  isAdmin  Boolean
  isOwner  Boolean

  @@id([userId, fridgeId])
}

model FridgeProduct {
  fridge         Fridge  @relation(fields: [fridgeId], references: [id])
  fridgeId       Int
  ownerId        String
  product        Product @relation(fields: [barcode], references: [barcode])
  barcode        String
  quantity       Int
  is_shared      Boolean
  expire_date    DateTime @db.Date

  @@id([fridgeId, barcode, ownerId, expire_date])
}

model IngredientProduct {
  ingredient     Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId   Int
  product        Product    @relation(fields: [barcode], references: [barcode])
  barcode        String
  quantity       Int

  @@id([ingredientId, barcode])
}
